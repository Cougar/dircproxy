# Welcome to dircproxy!
#
# This is an example configuration file, you can use it as a template to
# write your own.  Copy it to your home directory and name it
# .dircproxyrc to get it automatically picked up when you run dircproxy.
#
# You can also place it as /usr/local/etc/dircproxyrc if you want it globally
# installed, or anywhere else and load it with the -f parameter
#
# This configuration file defines configuration options and connection classes.
# Any configuration option (except listen_port) can be placed inside a
# connection class, the rest serve as defaults for following connection
# classes.
#
# The configuration file is read in-order, any option defined after a
# connection class will not affect it.
#
# All options are commented out, with their default value shown.  To set
# one, you need to uncomment and change the value.


# listen_port
#     What port should dircproxy listen for connections from IRC clients
#     on?
#
#     This can be a numeric port number, or a service name from /etc/services
#     This directive cannot go inside a connection class.
#
#listen_port 57000


# server_port
#     What port do we connect to IRC servers on if the server string doesn't
#     explicitly set one
#
#     This can be a numeric port number, or a service name from /etc/services
#
#server_port 6667

# server_retry
#     How many seconds after disconnection or last connection attempt do we
#     wait before retrying again?
#
#server_retry 15

# server_dnsretry
#     How many seconds after last connection attempt do we wait before trying
#     again if the error was DNS related?
#
#server_dnsretry 60

# server_maxattempts
#     If we are disconnected from the server, how many times should we iterate
#     the server list before giving up and declaring the proxied connection
#     dead?
#
#     0 = iterate forever
#
#server_maxattempts 0

# server_maxinitattempts
#     On first connection, how many times should we iterate the server list
#     before giving up and declaring the proxied connection dead?
#
#     0 = iterate forever.  This isn't recommended.
#
#server_maxinitattempts 5

# server_pingtimeout
#     For some people, dircproxy doesn't notice that the connection to the
#     server has been dropped because the socket remains open.  For example,
#     those behind a NAT'd firewall.  dircproxy can ping the server and make
#     sure it gets replies back.  It the time since the last reply was
#     received exceeds the number of seconds below the server is assumed to be
#     "stoned" and dircproxy leaves it.
#
#     0 = don't monitor PINGs
#
#server_pingtimeout 0


# channel_rejoin
#     If we are kicked off a channel, how many seconds do we wait before
#     attempting * to rejoin.
#
#     -1 = Don't rejoin
#      0 = Immediately
#
#channel_rejoin 15


# idle_maxtime
#     Set this to the maximum amount of time you want to appear idle for
#     while on IRC, if you set this then dircproxy will reset your idle
#     time if it reaches this limit (in seconds).
#
#     0 = Don't reset idle time
#
#idle_maxtime 0


# disconnect_existing_user
#     If, when you connect to dircproxy, another client is already using
#     your connection class (ie, if you forgot to close that one), then
#     this option lets you automatically kill that one off.  Make sure you
#     turn any "automatic reconnect to server" options off before using
#     this, otherwise you'll have a fight on your hands.
#
#     yes = Yes, disconnect
#      no = No, don't let me on
#
#disconnect_existing_user no

# disconnect_on_detach
#     When you detach from dircproxy it usually keeps you connected to the
#     server until you connect again.  If you don't want this, and you want
#     it to close your server connection as well, then set this.
#
#     yes = Close session on disconnection
#      no = Stay connected to server until reattachment
#
#disconnect_on_detach no


# drop_modes
#     Which user modes to drop automatically when you detach, handy to
#     limit the impact that your client has while connected, or for extra
#     security if you're an IRCop.  Set to "" to not drop any modes.
#
#drop_modes "oOws"

# local_address
#     Local hostname to use when connecting to an IRC server.  This provides
#     the same functionality as the ircII -H parameter.
#
#     none = Do not bind any specific hostname
#
#local_address "none"


# away_message
#     If you don't explicitly set an /AWAY message before you detach, dircproxy
#     can for you, so people don't think you are really at your keyboard
#     when you're not.
#
#     none = Do not set an away message for you
#
#away_message "Not available, messages are logged"

# attach_message
#     dircproxy can send an announcement onto every channel you are on when
#     you reattach to it, just to let everyone know you are back.  If you
#     start this with "/ME " then it will be sent as an ACTION CTCP message
#     (just like the ircII /me command).
#
#     none = Do not announce attachment
#
#attach_message "none"

# detach_message
#     dircproxy can send an announcement onto every channel you are on when
#     you detach from it, just to let everyone know you are gone.  If you
#     start this with "/ME " then it will be sent as an ACTION CTCP message
#     (just like the ircII /me command).
#
#     none = Do not announce detachment
#
#detach_message "none"


# chan_log_dir
#     Directory to keep channel logs in.  If you don't use this, dircproxy
#     stores them in a temporary directory and deletes them when finished.
#     If you do define it, it'll add to each log as you use it.  If you
#     start with "~/" then it will use a directory under your home directory.
#
#     none = Store in temporary directory and delete when finished
#
#chan_log_dir "none"

# chan_log_always
#     Channel text will always be logged while you are offline, so when you
#     come back you can see what you missed.  You can also, if you wish, log
#     channel text while online, so if you're only away a short time you can
#     get an idea of any context etc.  This is also useful if you're using
#     dircproxy's logs yourself, and wish to log everything.
#
#     yes = Log channel text while offline and online
#      no = Log channel text only while offline
#
#chan_log_always yes

# chan_log_timestamp
#     Channel text can have a timestamp added to the front to let you know
#     exactly when a message was logged.  These timestamps are displayed when
#     you recall the log files, or when automatially dumped.
#
#     yes = Include timestamp
#      no = Do not include timestamp
#
#chan_log_timestamp no

# chan_log_maxsize
#     To preserve your harddisk space, you can limit the size of a channel
#     log file.  Once the log file reaches this number of lines, every line
#     added will result in a line removed from the top.  If you know you are
#     never going to want all that logged information, this might be a good
#     setting for you.
#
#     0 = No limit to log files
#
#chan_log_maxsize 0

# chan_log_recall
#     Number of lines from each channel log file to automatically recall
#     to your IRC client when you attach.  If this is low, you may not get
#     much useful information, if this is high, it may take a long time for
#     all the information to arrive.
#
#     -1 = Recall the whole log (not recommended if chan_log_always is yes)
#      0 = Don't automatically recall anything
#
#chan_log_recall 128

# other_log_dir
#     Directory to keep the server/private message log in.  If you don't use
#     this, dircproxy stores it in a temporary directory and deletes it when
#     finished.  If you do define it, it'll add to the log as you use it.
#     If you start with "~/" then it will use a directory under your home
#     directory.
#
#     none = Store in temporary directory and delete when finished
#
#other_log_dir "none"

# other_log_always
#     Server and private messages will always be logged while you are offline,
#     so when you come back you can see what you missed.  You can also, if you
#     wish, log these messages while online, so if you're only away a short
#     time you can get an idea of any context etc.  This is also useful if
#     you're using dircproxy's logs yourself, and wish to log everything.
#
#     yes = Log server/private messages while offline and online
#      no = Log server/private messages only while offline
#
#other_log_always no

# other_log_timestamp
#     Server and private messages can have a timestamp added to the front to
#     let you know exactly when a message was logged.  These timestamps are
#     displayed when you recall the log files, or when automatially dumped.
#
#     yes = Include timestamp
#      no = Do not include timestamp
#
#other_log_timestamp no

# other_log_maxsize
#     To preserve your harddisk space, you can limit the size of the
#     server/private message log file.  Once the log file reaches this number
#     of lines, every line added will result in a line removed from the top.
#     If you know you are never going to want all that logged information,
#     this might be a good setting for you.
#
#     0 = No limit to log file
#
#other_log_maxsize 0

# other_log_recall
#     Number of lines from the server/private message log file to automatically
#     recall to your IRC client when you attach.  If this is low, you may not
#     get much useful information, if this is high, it may take a long time for
#     all the information to arrive.
#
#     -1 = Recall the whole log (not recommended if other_log_always is yes)
#      0 = Don't automatically recall anything
#
#other_log_recall -1


# motd_logo
#     If this is yes, then the dircproxy logo and version number will be
#     included in the message of the day when you connect.  Only the picky
#     would turn this off, its pretty!
#
#     yes = Show me the pretty logo
#      no = I don't like logos, I'm boring, I eat llamas.
#
#motd_logo yes

# motd_stats
#     Display information on what channels you were on, and log file sizes
#     etc in the message of the day.  This is handy, and lets you know how
#     not only much information you missed, but how much will be sent to you.
#
#     yes = Show the stats
#      no = They don't interest me, don't show them.
#
#motd_stats yes


# allow_persist
#     You can disable the /DIRCPROXY PERSIST command here if you do not want
#     people using your proxy to be able to do that.
#
#     yes = Command enabled
#      no = Command disabled
#
#allow_persist yes


# Connection Classes
#     Okay, thats the easy bit of the config file over and done with, now
#     you have to define "connection classes" to allow yourself, and others
#     if you wish, to connect to dircproxy.  Only one person may use a
#     connection class at one time.
#
#     You can define as many of these as you like!
#
#     A connection class must have a password, and the address of at least
#     one server to connect to.  The password is compared with the one
#     you configure your IRC client to use, and if they match then the
#     connection class is used.  Don't have two classes with the same password,
#     as the second one will never be seen.
#
#     Please note that although the passwords are shown here in plain text,
#     they must be encrypted (unless you manually edit src/dircproxy.h and
#     remove the ENCRYPTED_PASSWORDS #define).  Encrypt the passwords using
#     your system's standard crypt() function, there's a handy 'crypt'
#     utility in the contrib directory of the dircproxy source.
#
#connection {
#    password "foobar"
#    server "irc.linux.com"
#}

#     You can specify multiple servers, they are iterated if one fails or
#     disconnects you.  You can also specify specific ports and
#     optional passwords for a server, seperating the port and password with
#     a ':'.  To use a default port, and a specific password, separate it
#     from the server with a '::'.  (These passwords are *not* encrypted!)
#
#     You can also specify hostname and/or IP address masks with * or ?
#     wildcards.  These add security for your proxy by limiting the possible
#     places you can connect from.
# 
#     Additionally, as already noted, any option from above can be included
#     to further configure the class.
#
#connection {
#    password "applejack"
#
#    server "irc.linux.com"
#    server "irc.openprojects.net:6668"
#    server "irc.linux.com:6668"
#    server "oper.irc.netsplit.com:6660:scrumpy"
#    server "oper.irc.gurgle.org::scrumpy"
#
#    from "*.myisp.com"
#    from "*.mywork.net"
#
#    local_address "i.am.a.virtual.host.com"
#    away_message "I'm not here, go away!"
#
#    channel_rejoin -1
#    disconnect_existing_user yes
#}
