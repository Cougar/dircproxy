# Welcome to dircproxy!
#
# This is an example configuration file for dircproxy.  It can be placed
# in any number of possible locations, depending on exactly how you are
# running dircproxy.
#
# You can put this file anywhere on the disk and tell dircproxy where using
# the -f parameter:
#    $ ./src/dircproxy -f ./conf/dircproxyrc
# 
# Otherwise, if you want to just stash your config file somewhere and not
# worry about telling dircproxy where it is, place it in your home directory
# as ~/.dircproxyrc - it'll be automatically read.
#
# If its a bit more system-wide (if you're running a big dircproxy server
# for example) then place this file as /usr/local/etc/dircproxyrc (the exact
# location depends on the arguments you gave to the configure script).
#
# The configuration file is read in-order.  Each option serves as a default
# for those not specified in a connection class.  Therefore an option
# defined after a connection class will not affect it.
# 
# All the values are commented out, so they use the default value.  For each
# the default value is shown.  So to set something, you have to uncomment
# AND change the value.

# listen_port
#     What port should dircproxy listen for connections from IRC clients
#     on?
#
#     This can be a numeric port number, or a service name from /etc/services
#     This directive cannot go inside a connection class.
#listen_port 57000

# server_port
#     What port do we connect to IRC servers on if the server string doesn't
#     explicitly set one
#
#     This can be a numeric port number, or a service name from /etc/services
#
#server_port 6667

# server_retry
#     How many seconds after disconnection or last connection attempt do we
#     wait before retrying again?
#
#server_retry 15

# server_dnsretry
#     How many seconds after last connection attempt do we wait before trying
#     again if the error was DNS related?
#
#server_dnsretry 60

# server_maxattempts
#     If we are disconnected from the server, how many times should we iterate
#     the server list before giving up and declaring the proxied connection
#     dead?
#
#     0 = iterate forever
#
#server_maxattempts 0

# server_maxinitattempts
#     On first connection, how many times should we iterate the server list
#     before giving up and declaring the proxied connection dead?
#
#     0 = iterate forever.  This isn't recommended.
#
#server_maxinitattempts 5

# channel_rejoin
#     If we are kicked off a channel, how many seconds do we wait before
#     attempting * to rejoin.
#
#     -1 = Don't rejoin
#      0 = Immediately
#
#channel_rejoin 15

# disconnect_existing_user
#     If, when you connect to dircproxy, another client is already using
#     your connection class (ie, if you forgot to close that one), then
#     this option lets you automatically kill that one off.  Make sure you
#     turn any "automatic reconnect to server" options off before using
#     this, otherwise you'll have a fight on your hands.
#
#     yes = Yes, disconnect
#      no = No, don't let me on
#
#disconnect_existing_user no

# log_autorecall
#     How many lines of log off the bottom do we give to the client when it
#     reattaches?
#
#log_autorecall 128


# Connection Classes
#     Okay, thats the easy bit of the config file over and done with, now
#     you have to define "connection classes" to allow yourself, and others
#     if you wish, to connect to dircproxy.
#
#     You can define as many of these as you like!
#
#     A connection class must have a password, and the address of a server
#     to connect to.  The password is compared with the one you configure
#     your IRC client to send., and if they match, then this connection
#     class is used.  Don't have have two classes with the same password.
#     Only one person may use one connection class at a time.
#
#     Please note that although the passwords are shown in plain text here
#     they must be encrypted (unless you manually edit src/dircproxy.h and
#     remove the ENCRYPTED_PASSWORDS #define).  Encrypt the passwords using
#     your system's standard crypt() function, there's a handy 'crypt'
#     utility in the contrib directory of the dircproxy source.
#
#connection {
#    password "foobar"
#    server "irc.linux.com"
#}

#     You can specify multiple servers, they are iterated if one fails or
#     disconnects you.  You can also specify specific ports and
#     optional passwords for a server.
#
#     Note that the last entry in this list uses the default port, but
#     sets a password.  '::' is the magic thing that does this.
# 
#connection {
#    password "foobar"
#    server "irc.linux.com"
#    server "irc.openprojects.net:6668"
#    server "irc.linux.com:6668"
#    server "oper.irc.netsplit.com:6660:foobar"
#    server "oper.irc.gurgle.org::foobar"
#}

#     A complete connection class, using all the available special config keys.
#
#     'from' declares a hostmask that is matched against the machine you
#     connect from, it adds a bit of extra security.  The wildcards * and
#     ? are allowed.
#
#     If the server has more than one IP, you can use 'local_address' to
#     specify which one to bind to.  (just like ircII's -H)
#
#     If you detach without setting an /AWAY, dircproxy sets one for you,
#     you can change it using the 'away_message' config key, if you don't
#     want it to set one at all, set away_message to "none":
#
#connection {
#    password "applejack"
#
#    server "irc.netcom.net.uk"
#    server "chat.bt.net:6670"
#    server "ircnet.demon.co.uk"
#    server "irc.stealth.net"
#
#    from "*.myisp.com"
#    from "*.mywork.net"
#
#    local_address "i.am.a.virtual.host.com"
#    away_message "Not available, messages are logged"
#}

#     You can also specify any configuration directive from the main body
#     of the config file, except listen_port for obvious reasons, to further
#     customise your connection class.
#
#connection {
#    password "bar"
#    server_port "7000"
#    server "irc.dal.net"            # uses server_port 7000
#}
