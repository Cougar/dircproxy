New features for 0.8.0:

    DCC

	* DCC proxying.  Essential feature really.  Intercept DCC requests,
	  making listen sockets and connect sockets, forwarding data
	  between them, changing the addresses that gets sent.

	    dcc_proxy_incoming YES/no
	    dcc_proxy_outgoing YES/no

          Silently reject, or physically reject?

            dcc_proxy_sendreject YES/no

	  Ports we should allocate to listen on, this should be a range
	  that the client can connect to.

	    dcc_proxy_ports port,port-port

	* DCC-via-ssh.  This will be a really spiffy selling-port like
	  feature.  Its just one config option to do it too.

	    dcc_proxy_tunnelport port

	  All outgoing DCC connections will go through this, instead of
	  whatever address the tunnel pointed to

        * DCC send capturing, instead of proxying them, it stores the files
	  locally.

	    dcc_capture_directory none/"path"
	    dcc_capture_always yes/NO
	    dcc_capture_withnick YES/no
	    dcc_capture_maxsize 0/...


    IDENT

        * Miniature identd daemon that answers queries for dircproxy.  Basic
	  design, should see if it knows a certain port combo and if so
	  return the user it knows, otherwise run the inbuilt inetd.

	  Talk to it using some kind of pipe

        * You can then specify which ident to show for a connection
	  class or dircproxy:

	    local_username "scott"

	  Which can be changed with
	  
	    /DIRCPROXY USER username

	  depending on how this is set

	    allow_user YES/no

	  Again, will result in reconnection to server if changed


    SETUID
    
        * setuid() support for when dircproxy is running as root.  The
	  switch can be done before a server connection or afterwards.

            switch_user NONE/"nobody"
	    switch_user_afterconnect yes/NO

          This will fork(), dedicate the new proxy then setuid() to the right
	  user.  The parent will declare its copy of that proxy dead and close
	  up all its sockets etc.


Would be nice:

	* mIRC DCC RESUME support.  This will probably happen once I'm sure
	  dircproxy supports the major UNIX IRC client DCC weirdisms.  Then
	  I'll move on to checking any mIRC DCC weirdisms like RESUME (unless
	  its already in another client I have the source for :)

	* XDCC proxy support, once I learn how it works (see above).

	* dircproxy to send a number of ctcp's to the client on first
	  connection, then use those as replies when the client is detached.

	* Multiple listen ports if I can think of a good reason to
	  have them.  

	* Transparent proxying using ipchains/ipfwadm or whatever the
	  kernel uses this week.  Figure out how its done and see if its
	  feasible.

        * /DIRCPROXY STATUS (see who's online etc) and
	  /DIRCPROXY KILL (politely ask someone to leave :) for admins.

	* dircproxy party line(s), to talk to whoever is online at the
	  time.

	* "User lists" - hostmask based enabling banning/ignoring/auto-op
	  etc etc.  This will probably happen around version 1.2 of dircproxy
	  as I don't think its really needed for 1.0.

	* mIRC like File server.  Probably version 1.2 or even later if I
	  decide to do it at all.  This could then tie in with XDCC support
	  to provide a dircproxy fserver/xdcc server.

