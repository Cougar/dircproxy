New features for 0.8.0:

    MISC
    
	* New net routine to replace irc_net.c ...  needs to be a bit
	  more generic so it can be used for dcc_send.c and dcc_fserve.c
	  etc.

        * Support for channels with keys by requesting MODE when we
	  join and watching channel mode changes.

	  Need a way of squelching this mode command, it'd have to be a bit
	  more fancy than the usual squelch_mode - maybe a strlist?

	* Maybe have send queues, and make sock_send() just add to one of
	  those, actually sending the data whenever the socket becomes
	  available for write()ing.  Would remove the "dircproxy busy,
	  ping timeout" problem that can happen.


    IDENT

        * Miniature identd daemon that answers queries for dircproxy.  Basic
	  design, should see if it knows a certain port combo and if so
	  return the user it knows, otherwise run the inbuilt inetd.

	  Talk to it using some kind of pipe

        * You can then specify which ident to show for a connection
	  class or dircproxy:

	    local_username "scott"

	  Which can be changed with
	  
	    /DIRCPROXY USER username

	  depending on how this is set

	    allow_user YES/no

	  Again, will result in reconnection to server if changed


    FILTERING

        * New stage in the PRIVMSG/NOTICE handling that filters things
	  out.

	    Looks for CTCP messages that we handle, automatic CTCP
	    replying, DCC rewriting etc.
	      ctcp_ping_reply yes/NO
	      ctcp_ping_reply_always yes/NO
	      ctcp_time_reply yes/NO
	      ctcp_time_reply_always yes/NO
	      ctcp_version_reply none/"dircproxy 0.8.0"
	      ctcp_version_reply_always yes/NO
	      ctcp_finger_reply none/"http://dircproxy.sourceforge.net/"
	      ctcp_finger_reply_always yes/NO
	      ctcp_userinfo_reply none/"some random text"
	      ctcp_userinfo_reply_always yes/NO
	      ctcp_clientinfo_reply none/"ACTION DCC VERSION CLIENT..."
	      ctcp_clientinfo_reply_always yes/NO

	    Filters out anything undesirable
	      filter_effects yes/NO            # bold, underline etc
	      filter_effects_always yes/NO
	      filter_color yes/NO
	      filter_color_always yes/NO
	      filter_beep yes/NO
	      filter_beep_always yes/NO
	      filter_ctcp YES/no
	      filter_ctcp_always yes/NO
	      filter_ctcp_command NONE/command,command
	      filter_ctcp_command_always YES/no


    DCC

	* DCC proxying.  Essential feature really.  Intercept DCC requests,
	  making listen sockets and connect sockets, forwarding data
	  between them, changing the addresses that gets sent.

	    dcc_proxy_incoming YES/no
	    dcc_proxy_outgoing YES/no

          Silently reject, or physically reject?

            dcc_proxy_sendreject YES/no

	  Ports we should allocate to listen on, this should be a range
	  that the client can connect to.

	    dcc_proxy_ports port,port-port

	* DCC-via-ssh.  This will be a really spiffy selling-port like
	  feature.  Its just one config option to do it too.

	    dcc_proxy_tunnelport port

	  All outgoing DCC connections will go through this, instead of
	  whatever address the tunnel pointed to

        * DCC send capturing, instead of proxying them, it stores the files
	  locally.

	    dcc_capture_directory none/"path"
	    dcc_capture_always yes/NO
	    dcc_capture_withnick YES/no
	    dcc_capture_maxsize 0/...


    SETUID
    
        * setuid() support for when dircproxy is running as root.  This is
	  also gonna have many forms

            switch_user NONE/"nobody"
	    switch_user_afterconnect yes/NO

          This will fork() and dedicate the proxy unless already dedicated,
	  then setuid() it.  The parent will close its proxy and make it dead
	  (so inetd will result in a new process, with a dead parent).



Would be nice:

	* Multiple listen ports if I can think of a good reason to
	  have them.

	* Transparent proxying using ipchains/ipfwadm or whatever the
	  kernel uses this week.  Figure out how its done and see if its
	  feasible.

	* "User lists" - hostmask based enabling banning/ignoring/auto-op
	  etc etc.

	* mIRC DCC RESUME stuff (how does it work etc?)

	* mIRC like File server

	* XDCC stuff (possibly tying in with the file server above)

